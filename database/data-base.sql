DROP DATABASE IF EXISTS `VENTAEMPLEADOS`;
CREATE DATABASE `VENTAEMPLEADOS`;
USE `VENTAEMPLEADOS`;

-- CREACION DE LA TABLA DE USUARIO ---
CREATE TABLE `USUARIO`(
CEDULA DOUBLE NOT NULL,
NOMBRE VARCHAR(700) NOT NULL,
ROL VARCHAR(300) NOT NULL,
CLAVE VARCHAR(2000) NOT NULL,
PREGUNTA VARCHAR(500) NOT NULL,
RESPUESTA VARCHAR(2000) NOT NULL,
USUARIO_ACTIVADO DOUBLE NOT NULL,
USUARIO_VERIFICADO DOUBLE NOT NULL,
FECHA_REGISTRO DATETIME NOT NULL,
ULTIMO_INGRESO DATETIME NOT NULL,
CONTACTO VARCHAR(1000) NOT NULL,
PRIMARY KEY(CEDULA));

-- CREACION DE LA TABLA DE CATEGORIA ---
CREATE TABLE `CATEGORIA`(
CODIGO_CATEGORIA DOUBLE NOT NULL AUTO_INCREMENT,
NOMBRE_CATEGORIA VARCHAR(700) NOT NULL,
DISPONIBILIDAD DOUBLE NOT NULL,
PRODUCTOS_VINCULADOS DOUBLE NOT NULL,
PRODUCTOS_DISPONIBLES DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_CATEGORIA));

-- CREACION DE LA TABLA DE PRODUCTO ---
CREATE TABLE `PRODUCTO`(
CODIGO_PRODUCTO DOUBLE NOT NULL,
NOMBRE_PRODUCTO VARCHAR(700) NOT NULL,
IMAGEN_PRINCIPAL VARCHAR(1000) NOT NULL,
IVA DOUBLE NOT NULL,
DESCUENTO DOUBLE NOT NULL,
PRECIO_BASE DOUBLE NOT NULL,
DETALLES VARCHAR(3000) NOT NULL,
PRODUCTO_DISPOBIBLE DOUBLE NOT NULL,
ESTADO_PRODUCTO DOUBLE NOT NULL,
ID_CATEGORIA DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_PRODUCTO),
FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA(CODIGO_CATEGORIA));

-- CREACION DE LA TABLA DE AUXILIAR PRODUCTO INFORMACION---
CREATE TABLE `PRODUCTO_INFORMACION`(
NOMBRE_ESTILO VARCHAR(700) NOT NULL,
TIPO_CONTENIDO DOUBLE NOT NULL,
CONTENIDO DOUBLE NOT NULL,
IMAGEN_EXTRA VARCHAR(1000) NOT NULL, 
INFORMACION_ADICIONAL VARCHAR(3000) NOT NULL,
DISPONIBLE DOUBLE NOT NULL,
STOCK DOUBLE NOT NULL,
ID_PRODUCTO DOUBLE NOT NULL,
FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(CODIGO_PRODUCTO));

-- CREACION DE LA TABLA VENTA --
CREATE TABLE `VENTA`(
CODIGO_VENTA DOUBLE NOT NULL AUTO_INCREMENT,
FECHA_VENTA DATETIME NOT NULL,
VALOR_IVA DOUBLE NOT NULL,
VALOR_DESCUENTO DOUBLE NOT NULL,
VALOR_TOTAL DOUBLE NOT NULL,
INFORMACION_ENVIADA DOUBLE NOT NULL,
ESTADO_VENTA DOUBLE NOT NULL,
OBSERVACIONES VARCHAR(2000),
CEDULA_USUARIO DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_VENTA),
FOREIGN KEY (CEDULA_USUARIO) REFERENCES USUARIO(CEDULA));

-- CREACION DE LA TABLA ITEM --
CREATE TABLE `ITEM`(
NOMBRE_ITEM VARCHAR(1600) NOT NULL,
INFORMACION_ADICIONAL VARCHAR(3000) NOT NULL,
DESCUENTO DOUBLE NOT NULL,
IVA DOUBLE NOT NULL,
CANTIDAD DOUBLE NOT NULL,
VALOR_BASE DOUBLE NOT NULL,
VALOR_IVA DOUBLE NOT NULL,
VALOR_DESCUENTO DOUBLE NOT NULL,
VALOR_TOTAL DOUBLE NOT NULL,
ID_PRODUCTO DOUBLE NOT NULL,
FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(CODIGO_PRODUCTO));

-- CREACION DE LA TABLA APLICACION --
CREATE TABLE `APLICACION`(
CODIGO_APLICACION DOUBLE NOT NULL,
EMAIL_APP VARCHAR(1000) NOT NULL,
CLAVE_DINAMICA VARCHAR(100) NOT NULL,
LISTA_EMAIL VARCHAR(3000) NOT NULL,
CARPETA_IMAGENES VARCHAR(4000) NOT NULL,
CARPETA_COMPRAS VARCHAR(4000) NOT NULL,
PRIMARY KEY (CODIGO_APLICACION));

-- CREACION TABLA DE ALERTAS --
CREATE TABLE `ALERTAS`(
CODIGO_ALERTA DOUBLE NOT NULL,
TITULO VARCHAR(500) NOT NULL,
INFORMACION VARCHAR(1000) NOT NULL,
ID_APLICACION DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_ALERTA),
FOREIGN KEY (ID_APLICACION) REFERENCES APLICACION(GODIGO_APLICACION));

-- CREACION TABLA DE HISTORIAL --
CREATE TABLE `HISTORIAL`(
NIVEL_RIESGO DOUBLE NOT NULL,
FECHA DATETIME NOT NULL,
INFORMACION VARCHAR(5000) NOT NULL,
CEDULA_USUARIO DOUBLE NOT NULL,
NOMBRE VARCHAR(700) NOT NULL);

ALTER TABLE `CATEGORIA` AUTO_INCREMENT = 1;
ALTER TABLE `VENTA` AUTO_INCREMENT = 1;


-- temporar ----------

-- FUNCIONES Y PROCEDIMIENTOS DE INSERTAR, MODIFICAR, ELIMINAR DATOS DE USUARIOS --

-- FUNCION QUE BUSCA SI YA EL USUARIO ESTA REGISTRADO --
DROP FUNCTION IF EXISTS `FUNCTION_EXISTE_USUARIO`;
DELIMITER $$
CREATE FUNCTION `FUNCTION_EXISTE_USUARIO`(CEDULA DOUBLE)
RETURNS DOUBLE
DETERMINISTIC
BEGIN

DECLARE ESTADO DOUBLE;
-- BUSCAR CONCIDENCIAS EN LA BASE DE DATOS
SET ESTADO=(
SELECT USUARIO_ACTIVADO
FROM USUARIO
WHERE CEDULA_USUARIO=CEDULA);
-- SI NO SE ENCUENTRAN REGISTROS SE DEVUELVE UN -10000
SET ESTADO=IFNULL(ESTADO, -10000);

RETURN ESTADO;
END $$
DELIMITER ; 

-- PROCEDIMIENTO MODIFICAR DATOS DE USUARIO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_USER_MYCOMFIG`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_USER_MYCOMFIG`(IN IDC DOUBLE, IN ANSWER VARCHAR(500), IN QUESTION VARCHAR(500), IN NEWPASS VARCHAR(500), IN NEWCORREO VARCHAR(500))
BEGIN
DECLARE VERCLI DOUBLE;
DECLARE VERPASS, VERQUES, VERCORRE VARCHAR(500);

SET VERCLI = (SELECT CEDULA_USUARIO FROM USUARIO WHERE CEDULA_USUARIO = IDC);
SET VERCLI = (SELECT IFNULL(VERCLI, -1000));

SET VERPASS = (SELECT IFNULL(NEWPASS, -1000));
SET VERQUES = (SELECT IFNULL(ANSWER, -1000));
SET VERCORRE = (SELECT IFNULL(NEWCORREO, -1000));

IF (VERCLI != -1000 AND VERPASS != -1000) THEN
UPDATE USUARIO SET CLAVE_USUARIO = NEWPASS WHERE CEDULA_USUARIO = IDC;
END IF;

IF (VERCLI != -1000 AND VERQUES != -1000) THEN
UPDATE USUARIO SET PREGUNTA_USUARIO = QUESTION, RESPUESTA_USUARIO = ANSWER WHERE CEDULA_USUARIO = IDC;
END IF;

IF (VERCLI != -1000 AND VERCORRE != -1000) THEN
UPDATE USUARIO SET CORREO_USUARIO = NEWCORREO WHERE CEDULA_USUARIO = IDC;
END IF;

SELECT * FROM USUARIO WHERE CEDULA_USUARIO = IDC;
END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR DATOS DE USUARIO AMINISTRADOR --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_USER_ADMIN_MYCOMFIG`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_USER_ADMIN_MYCOMFIG`(IN IDC DOUBLE, IN NEWNAMEUSER VARCHAR(500), IN ACTIVADOUSER DOUBLE, IN NEWPASS VARCHAR(500))
BEGIN
DECLARE VERCLI DOUBLE;
DECLARE VERPASS, VERNAME VARCHAR(500);

SET VERCLI = (SELECT CEDULA_USUARIO FROM USUARIO WHERE CEDULA_USUARIO = IDC);
SET VERCLI = (SELECT IFNULL(VERCLI, -1000));

SET VERPASS = (SELECT IFNULL(NEWPASS, -1000));
SET VERNAME = (SELECT IFNULL(NEWNAMEUSER, -1000));

IF (VERCLI != -1000 AND VERPASS != -1000) THEN
UPDATE USUARIO SET CLAVE_USUARIO = NEWPASS WHERE CEDULA_USUARIO = IDC;
END IF;

IF (VERCLI != -1000 AND VERNAME != -1000) THEN
UPDATE USUARIO SET NOMBRE_USUARIO = NEWNAMEUSER WHERE CEDULA_USUARIO = IDC;
END IF;

IF (VERCLI != -1000) THEN
UPDATE USUARIO SET USUARIO_ACTIVADO = ACTIVADOUSER WHERE CEDULA_USUARIO = IDC;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR UN NUEVO USUARIO A LA BASE DE DATOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_USUARIO`;
DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_USUARIO`(IN CEDULA DOUBLE,IN NOMBRE VARCHAR(500),IN CLAVE VARCHAR(500),IN PREGUNTA VARCHAR(500),IN RESPUESTA VARCHAR(500), IN NEWCORREO VARCHAR(500))
BEGIN

DECLARE EXISTE,ROL DOUBLE;
SET EXISTE=(SELECT FUNCTION_EXISTE_USUARIO(CEDULA));

IF(EXISTE=1 OR EXISTE=0) THEN
-- SI EL USUARIO EXISTE DEVUELVO SU REGISTRO
SELECT USUARIO_ACTIVADO
FROM USUARIO
WHERE CEDULA_USUARIO=CEDULA;

ELSE IF(EXISTE=-10000) THEN
-- BUSCO SI YA EXISTEN USUARIOS ADMINISTRADORES DEL SISTEMA 
SET ROL=(SELECT COUNT(CEDULA_USUARIO)
FROM USUARIO
WHERE ROL_USUARIO="ADMINISTRADOR");
-- SI EL USUARIO NO EXISTE Y ES EL PRIMERO LO PASO COMO ADMINISTRADOR, DE LO CONTRARIO LO PASO COMO EMPLEADO
IF(ROL=0) THEN
INSERT INTO USUARIO()
VALUES (CEDULA,NOMBRE,"ADMINISTRADOR",CLAVE,PREGUNTA,RESPUESTA,1,NOW(),NOW(), NEWCORREO);
ELSE
INSERT INTO USUARIO
VALUES (CEDULA,NOMBRE,"EMPLEADO",CLAVE,PREGUNTA,RESPUESTA,1,NOW(),NOW(), NEWCORREO);
END IF;
END IF;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO VERIFICACION DE USUARIO LOGIN --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_USUARIO_SISTEMA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_USUARIO_SISTEMA`(IN ID DOUBLE)
BEGIN

SELECT * FROM USUARIO WHERE CEDULA_USUARIO = ID;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR DATOS DE ENVIO --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSET_USUARIO_ENVIAR_VENTAS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSET_USUARIO_ENVIAR_VENTAS`(IN EMAILS VARCHAR(500), IN PASS VARCHAR(500), IN EMAILV VARCHAR(500), IN GALERIAF VARCHAR(500), IN VENTASF VARCHAR(500))
BEGIN

DELETE FROM CONTACTO_EMAIL;
INSERT INTO CONTACTO_EMAIL()
VALUES("1",EMAILS,PASS,EMAILV,GALERIAF,VENTASF);

SELECT * FROM CONTACTO_EMAIL WHERE ID_EMAIL_ENVIO = "1";
END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR DATOS DE ENVIO --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_USUARIO_ENVIAR_VENTAS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_USUARIO_ENVIAR_VENTAS`()
BEGIN

SELECT * FROM CONTACTO_EMAIL WHERE ID_EMAIL_ENVIO = "1";

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR EMPLEADOS PARA MODIFICAR --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_USUARIO_SISTEMA_ALL`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_USUARIO_SISTEMA_ALL`()
BEGIN

SELECT * FROM USUARIO WHERE ROL_USUARIO = "EMPLEADO";

END $$
DELIMITER ;

-- PROCEDIMIENTO ULTIMO LOGIN --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_USUARIO_DATELOGIN`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_USUARIO_DATELOGIN`(IN ID DOUBLE)
BEGIN

UPDATE USUARIO SET ULTIMO_ACCESO = NOW() WHERE CEDULA_USUARIO = ID;

END $$
DELIMITER ;

-- PROCEDIMIENTO CONSULTAR DATOS DE USUARIO PARA RECUPERACION DE LA CLAVE  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_USUARIO_FORGET_PASS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_USUARIO_FORGET_PASS`(IN ID DOUBLE)
BEGIN

SELECT CEDULA_USUARIO, NOMBRE_USUARIO, PREGUNTA_USUARIO, RESPUESTA_USUARIO, USUARIO_ACTIVADO, ROL_USUARIO  FROM USUARIO WHERE CEDULA_USUARIO = ID;

END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR LA CLAVE EN RECUPERACION DE LA MISMA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_USUARIO_FORGET_PASS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_USUARIO_FORGET_PASS`(IN ID DOUBLE, IN CLAVE VARCHAR(500))
BEGIN

UPDATE USUARIO SET CLAVE_USUARIO = CLAVE WHERE CEDULA_USUARIO = ID;

END $$
DELIMITER ;

-- PROCEDIMIENTO VERIFICACION DE USUARIO EN LOGIN --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_USUARIO_SISTEMA_VERIFY`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_USUARIO_SISTEMA_VERIFY`(IN ID DOUBLE, IN NOMBRE VARCHAR(500), IN ROL VARCHAR(500), IN CLAVE VARCHAR(500), IN ACTIVADO DOUBLE)
BEGIN

SELECT CEDULA_USUARIO FROM USUARIO WHERE CEDULA_USUARIO = ID AND NOMBRE_USUARIO = NOMBRE AND ROL_USUARIO = ROL AND CLAVE_USUARIO = CLAVE AND USUARIO_ACTIVADO = ACTIVADO;

END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR USUARIO ESTADO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_CONDICTION_USER`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_CONDICTION_USER`(IN CODIGO DOUBLE, IN ESTADO DOUBLE)
BEGIN

UPDATE USUARIO SET USUARIO_ACTIVADO = ESTADO WHERE CEDULA_USUARIO = CODIGO;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR ARTICULOS DE PRODUCTO   --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_PRODUCTO_ARTICULO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_PRODUCTO_ARTICULO`()
BEGIN

SELECT * FROM PRODUCTO ORDER BY ID_CATEGORIA ASC;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR CATEGORIA DE PRODUCTP  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_PRODUCTO_CATEGORIA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_PRODUCTO_CATEGORIA`()
BEGIN

SELECT * FROM CATEGORIA;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR COLORES DE PRODUCTP  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_PRODUCTO_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_PRODUCTO_COLOR`()
BEGIN

SELECT ID_PRODUCTO, ID_COLOR, NOMBRE_COLOR, HEXADECIMAL, COD_GEINFOR,PRECIO_EXTRA  FROM PRODUCTO_COLOR INNER JOIN COLOR ON COLOR.CODIGO_COLOR = PRODUCTO_COLOR.ID_COLOR ORDER BY ID_PRODUCTO ASC;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR COLORES CON IMAGENES  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_PRODUCTO_MULTICOLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_PRODUCTO_MULTICOLOR`()
BEGIN

SELECT ID_PRODUCTO, UR_IMAGEN, NOMBRE_MULTICOLOR, COD_GEINFOR, PRECIO_EXTRA FROM PRODUCTO_MULTICOLOR ORDER BY ID_PRODUCTO ASC;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR COLORES --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_COLOR`()
BEGIN

SELECT * FROM COLOR;

END $$
DELIMITER ;


-- PROCEDIMIENTO LISTAR CATEGORIA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_CATEGORY`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_CATEGORY`(IN NOMBRE VARCHAR(500))
BEGIN

SELECT * FROM CATEGORIA WHERE NOMBRE_CATEGORIA=NOMBRE;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR CATEGORIA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_DELETECATEGORY`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_DELETECATEGORY`(IN CODE DOUBLE, IN ESTADO DOUBLE)
BEGIN

UPDATE CATEGORIA SET CATEGORIA_ACTIVADO = ESTADO WHERE CODIGO_CATEGORIA = CODE;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR CATEGORIA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_CATEGORY_DESCUENTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_CATEGORY_DESCUENTO`(IN CODE DOUBLE, IN DESCUEN DOUBLE)
BEGIN

UPDATE CATEGORIA SET DESCUENTO = DESCUEN WHERE CODIGO_CATEGORIA = CODE;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR CATEGORIA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_CATEGORY_IVA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_CATEGORY_IVA`(IN IV DOUBLE)
BEGIN

UPDATE CATEGORIA SET IVA = IV;

END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR NOMBRE DE CATEGORIA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_NAMECATEGORY`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_NAMECATEGORY`(IN NOMBRE VARCHAR(500), IN ID DOUBLE)
BEGIN

UPDATE CATEGORIA SET NOMBRE_CATEGORIA=UPPER(NOMBRE) WHERE CODIGO_CATEGORIA = ID;

END $$
DELIMITER ;

-- PROCEDIMIENTO BUSCAR COLORES  --
DROP PROCEDURE IF EXISTS `PROCEDURE_SEARCH_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_SEARCH_COLOR`(IN NOMBRE VARCHAR(500))
BEGIN

SELECT * FROM COLOR WHERE HEXADECIMAL=NOMBRE;

END $$
DELIMITER ;

-- PROCEDIMIENTO AJUSTES DE COLOR  --
DROP PROCEDURE IF EXISTS `PROCEDURE_SETTING_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_SETTING_COLOR`(IN COLOR VARCHAR(500), IN NOMBRE VARCHAR(500), IN PROCED DOUBLE)
BEGIN
DECLARE VER DOUBLE;

IF(PROCED = 0) THEN
INSERT INTO COLOR()
VALUES (NULL, UPPER(NOMBRE), COLOR);
ELSE IF(PROCED = 1) THEN
UPDATE COLOR SET NOMBRE_COLOR = UPPER(NOMBRE) WHERE HEXADECIMAL = COLOR;
ELSE IF (PROCED = 2) THEN
SET VER = (SELECT CODIGO_COLOR FROM COLOR WHERE HEXADECIMAL=COLOR);
DELETE FROM PRODUCTO_COLOR WHERE ID_COLOR=VER;
DELETE FROM COLOR WHERE HEXADECIMAL=COLOR;
END IF;
END IF;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR O MODIFICAR PRODUCTO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_UPDATE_PRODUCTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_UPDATE_PRODUCTO`(IN CODIGO DOUBLE, IN NOMBRE VARCHAR(500), IN IMG VARCHAR(500), IN PRECIO DOUBLE, IN ACTIVADO DOUBLE, IN CATEGORIA VARCHAR(500), IN DETALL VARCHAR(500))
BEGIN
DECLARE VER, CATEGORY DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO=CODIGO);
SET VER = (SELECT IFNULL(VER, -1000));

SET CATEGORY = (SELECT CODIGO_CATEGORIA FROM CATEGORIA WHERE UPPER(NOMBRE_CATEGORIA) = UPPER(CATEGORIA));
SET CATEGORY = (SELECT IFNULL(CATEGORY, -1000));

IF (CATEGORY = -1000) THEN 
INSERT INTO CATEGORIA()
VALUES (NULL, UPPER(CATEGORIA), "1", "0", "19", "0", "0");
SET CATEGORY = (SELECT CODIGO_CATEGORIA FROM CATEGORIA WHERE NOMBRE_CATEGORIA = UPPER(CATEGORIA));
END IF;

IF (VER = -1000) THEN
INSERT INTO PRODUCTO()
VALUES (CODIGO, NOMBRE, IMG, PRECIO, ACTIVADO, CATEGORY, DETALL);
ELSE 
UPDATE PRODUCTO
SET NOMBRE_PRODUCTO = NOMBRE, IMAGEN = IMG, PRECIO_PRODUCTO = PRECIO, PRODUCTO_ACTIVADO = ACTIVADO, ID_CATEGORIA = CATEGORY, DETALLES = DETALL
WHERE CODIGO_PRODUCTO = VER;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR ESTADO DE PRODUCTO PRODUCTO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_PRODUCTO_HOME`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_PRODUCTO_HOME`(IN CODIGO DOUBLE, IN ACTIVADO DOUBLE)
BEGIN
DECLARE VER, CATEGORY DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO=CODIGO);
SET VER = (SELECT IFNULL(VER, -1000));

IF (VER != -1000) THEN
UPDATE PRODUCTO
SET PRODUCTO_ACTIVADO = ACTIVADO
WHERE CODIGO_PRODUCTO = VER;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO MODIFICAR ESTADO DE USUARIO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_USER_HOME`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_USER_HOME`(IN CODIGO DOUBLE, IN ACTIVADO DOUBLE)
BEGIN
DECLARE VER, CATEGORY DOUBLE;

SET VER = (SELECT CEDULA_USUARIO FROM USUARIO WHERE CEDULA_USUARIO=CODIGO);
SET VER = (SELECT IFNULL(VER, -1000));

IF (VER != -1000) THEN
UPDATE USUARIO
SET USUARIO_ACTIVADO = ACTIVADO
WHERE CEDULA_USUARIO = VER;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR COLORES DE PRODUCTO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_DELETE_PRODUCTO_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_DELETE_PRODUCTO_COLOR`(IN CODIGO DOUBLE)
BEGIN

DELETE FROM PRODUCTO_COLOR WHERE ID_PRODUCTO = CODIGO;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR COLORES DE PRODUCTO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_DELETE_PRODUCTO_COLORIMG`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_DELETE_PRODUCTO_COLORIMG`(IN CODIGO DOUBLE)
BEGIN

DELETE FROM PRODUCTO_MULTICOLOR WHERE ID_PRODUCTO = CODIGO;

END $$
DELIMITER ;

-- PROCEDIMIENTO ELIMINAR  Y INGRESAR COLORES DE PRODUCTO  --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_PRODUCTO_COLOR`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_PRODUCTO_COLOR`(IN HEXAD VARCHAR(500), IN CODIGO DOUBLE, IN COD_GEIN DOUBLE, IN PRICEMORE DOUBLE)
BEGIN
DECLARE VER, COLOR DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO);
SET VER = (SELECT IFNULL(VER, -1000));

SET COLOR = (SELECT CODIGO_COLOR FROM COLOR WHERE HEXADECIMAL = HEXAD);
SET COLOR = (SELECT IFNULL(COLOR, -1000));

IF (VER != -1000 AND COLOR != -1000) THEN
DELETE FROM PRODUCTO_COLOR WHERE ID_PRODUCTO = VER AND ID_COLOR = COLOR;
INSERT INTO PRODUCTO_COLOR ()
VALUES (VER, COLOR, COD_GEIN, PRICEMORE);
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR COLORES CON IMAGEN  --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_PRODUCTO_MULTICOLORIMG`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_PRODUCTO_MULTICOLORIMG`(IN CODIGO DOUBLE, IN COD_GEIN DOUBLE, IN NOMBREIM VARCHAR(500), IN URIMG VARCHAR(500), IN PRICEMORE DOUBLE)
BEGIN
DECLARE VER DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGO);
SET VER = (SELECT IFNULL(VER, -1000));

IF (VER != -1000) THEN
DELETE FROM PRODUCTO_MULTICOLOR WHERE ID_PRODUCTO = VER AND NOMBRE_MULTICOLOR = NOMBREIM;
INSERT INTO PRODUCTO_MULTICOLOR ()
VALUES (CODIGO, URIMG, NOMBREIM, COD_GEIN, PRICEMORE);
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR VENTA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_VENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_VENTA`(IN VALORTOTAL DOUBLE, IN CODIGOUSER DOUBLE, IN ESTADE DOUBLE )
BEGIN
DECLARE VER DOUBLE;
DECLARE FECHA DATETIME;

SET FECHA = NOW();
SET VER = (SELECT CEDULA_USUARIO FROM USUARIO WHERE CEDULA_USUARIO = CODIGOUSER);
SET VER = (SELECT IFNULL(VER, -1000));

IF (VER != -1000) THEN
INSERT INTO VENTA ()
VALUES (NULL, FECHA, VALORTOTAL, VER, ESTADE, 0);
END IF;

SELECT  CODIGO_VENTA FROM VENTA WHERE FECHA_VENTA = FECHA;
END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR VENTA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_VENTA_ESTEDESEND`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_VENTA_ESTEDESEND`(IN CODS DOUBLE, IN ESTADE DOUBLE )
BEGIN

UPDATE VENTA SET ESTADE_SEND = ESTADE WHERE CODIGO_VENTA = CODS;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR VENTA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_VENTA_ESTEBUY`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_VENTA_ESTEBUY`(IN CODS DOUBLE, IN ESTADE DOUBLE )
BEGIN

UPDATE VENTA SET ESTADE_BUY = ESTADE WHERE CODIGO_VENTA = CODS;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR VENTA ITEMS --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_VENTA_ITEM`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_VENTA_ITEM`(IN NAMEITEM VARCHAR(500), IN COLOR VARCHAR(500), IN CANTIDAD DOUBLE, IN VALORUNI DOUBLE, IN FECHAVENTA VARCHAR(500), IN CODEPRO DOUBLE, IN CODGEINFOR DOUBLE)
BEGIN
DECLARE VER, VERVENTA DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODEPRO);
SET VER = (SELECT IFNULL(VER, -1000));

SET VERVENTA = (SELECT CODIGO_VENTA FROM VENTA WHERE CODIGO_VENTA = FECHAVENTA);
SET VERVENTA = (SELECT IFNULL(VERVENTA, -1000));

IF(VER != -1000 AND VERVENTA != -1000) THEN
INSERT INTO ITEM()
VALUES (CODGEINFOR, NAMEITEM, COLOR, CANTIDAD, VALORUNI, CANTIDAD*VALORUNI, VERVENTA, VER);
END IF;

END $$
DELIMITER ;

END $$
DELIMITER ;

-- PROCEDIMIENTO VER VENTA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_VENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_VENTA`(IN CODECLIENTE DOUBLE)
BEGIN
DECLARE VER DOUBLE;

SET VER = (SELECT IFNULL(CODECLIENTE, -1000));

IF(VER != -1000 AND CODECLIENTE != 0) THEN
SELECT * FROM VENTA WHERE ID_USUARIO = CODECLIENTE ORDER BY VENTA.FECHA_VENTA DESC;
ELSE
SELECT * FROM VENTA ORDER BY VENTA.FECHA_VENTA DESC;
END IF;

END $$
DELIMITER ;

-- PROCEDIMIENTO LISTAR LOS ITEM DE LA VENTA
DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_VENTA_ITEM`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LIST_VENTA_ITEM`(IN CODECLIENTE DOUBLE)
BEGIN
DECLARE VER DOUBLE;

SET VER = (SELECT IFNULL(CODECLIENTE, -1000));

IF(VER != -1000 AND CODECLIENTE != 0) THEN
SELECT * FROM ITEM INNER JOIN VENTA ON ITEM.ID_VENTA = VENTA.CODIGO_VENTA WHERE VENTA.ID_USUARIO = CODECLIENTE;
ELSE
SELECT * FROM ITEM INNER JOIN VENTA ON ITEM.ID_VENTA = VENTA.CODIGO_VENTA;
END IF;

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_REPORTEFALLOS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_INSERT_REPORTEFALLOS`(IN ASUNTO_REPORT VARCHAR(500), IN DETALLES_REPORT VARCHAR(500), IN CEDULA DOUBLE) 
BEGIN

INSERT INTO REPORTE_FALLOS()
VALUES (NULL, NOW(), ASUNTO_REPORT, DETALLES_REPORT, CEDULA);

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_REPORTEFALLOS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_LIST_REPORTEFALLOS`() 
BEGIN

SELECT REPORTE_FALLOS.FECHA_REPORTE, REPORTE_FALLOS.ASUNTO, REPORTE_FALLOS.DETALLES, USUARIO.NOMBRE_USUARIO
FROM REPORTE_FALLOS
INNER JOIN USUARIO ON REPORTE_FALLOS.ID_USUARIO = USUARIO.CEDULA_USUARIO 
ORDER BY REPORTE_FALLOS.CODIGO_FALLO DESC;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_INSERTUPDATE_ALERTAS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_INSERTUPDATE_ALERTAS`(IN CODIGO DOUBLE, IN INFORMACION_ALER VARCHAR(500)) 
BEGIN

DECLARE VERIFICADOR DOUBLE;
SET VERIFICADOR = (SELECT CODIGO_ALERTA FROM ALERTA_APP WHERE CODIGO_ALERTA = CODIGO);
SET VERIFICADOR = (SELECT IFNULL(VERIFICADOR, -1000));

IF (VERIFICADOR = -1000) THEN 
INSERT INTO ALERTA_APP()
VALUES (CODIGO, INFORMACION_ALER);
ELSE 
UPDATE ALERTA_APP SET INFORMACION = INFORMACION_ALER WHERE CODIGO_ALERTA = CODIGO;
END IF;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_DELETE_ALERTAS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_DELETE_ALERTAS`(IN CODIGO DOUBLE) 
BEGIN

DELETE FROM ALERTA_APP WHERE CODIGO_ALERTA = CODIGO;

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_LIST_ALERTAS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_LIST_ALERTAS`() 
BEGIN

SELECT * FROM ALERTA_APP;

END $$
DELIMITER ;

-- REPORTES ---

DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_VENTASFI`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_VENTASFI`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT VENTA.CODIGO_VENTA, VENTA.FECHA_VENTA, VENTA.VALOR_TOTAL_VENTA, VENTA.ID_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO 
FROM VENTA 
INNER JOIN USUARIO ON VENTA.ID_USUARIO = USUARIO.CEDULA_USUARIO 
WHERE VENTA.ESTADE_BUY = 0 AND (VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL);

ELSE IF(FILTRATE = 3) THEN

SELECT VENTA.CODIGO_VENTA, VENTA.FECHA_VENTA, VENTA.VALOR_TOTAL_VENTA, VENTA.ID_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO 
FROM VENTA 
INNER JOIN USUARIO ON VENTA.ID_USUARIO = USUARIO.CEDULA_USUARIO 
WHERE VENTA.ESTADE_BUY = 1 AND (VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL);

ELSE IF(FILTRATE = 1) THEN

SELECT VENTA.CODIGO_VENTA, VENTA.FECHA_VENTA, VENTA.VALOR_TOTAL_VENTA, VENTA.ID_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO 
FROM VENTA 
INNER JOIN USUARIO ON VENTA.ID_USUARIO = USUARIO.CEDULA_USUARIO 
WHERE VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_TOPPRODUCTOSMASVENDIDOS`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_TOPPRODUCTOSMASVENDIDOS`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.ID_PRODUCTO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

ELSE IF(FILTRATE = 3) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.ID_PRODUCTO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

ELSE IF(FILTRATE = 1) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY ITEM.ID_PRODUCTO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_TOPPRODUCTOSMASVENDIDOSCOLOR`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_TOPPRODUCTOSMASVENDIDOSCOLOR`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT  ITEM.NOMBRE_ITEM, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM
ORDER BY ITEM.ID_PRODUCTO DESC;

ELSE IF(FILTRATE = 3) THEN

SELECT  ITEM.NOMBRE_ITEM, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM 
ORDER BY ITEM.ID_PRODUCTO DESC;

ELSE IF(FILTRATE = 1) THEN

SELECT  ITEM.NOMBRE_ITEM, VENTA.FECHA_VENTA, ITEM.ID_PRODUCTO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2 
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY ITEM.NOMBRE_ITEM 
ORDER BY ITEM.ID_PRODUCTO DESC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_TOPEMPLEADOMAYORCOMPRA`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_TOPEMPLEADOMAYORCOMPRA`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT USUARIO.CEDULA_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2, (SELECT DISTINCT COUNT(ITEM.ID_PRODUCTO)
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO AS USUARIOT2  ON USUARIOT2.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE USUARIOT2.CEDULA_USUARIO = USUARIO.CEDULA_USUARIO
GROUP BY USUARIOT2.CEDULA_USUARIO LIMIT 1) AS OP3
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY VENTA.ID_USUARIO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

ELSE IF(FILTRATE = 3) THEN

SELECT USUARIO.CEDULA_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2, (SELECT DISTINCT COUNT(ITEM.ID_PRODUCTO)
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO AS USUARIOT2  ON USUARIOT2.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE USUARIOT2.CEDULA_USUARIO = USUARIO.CEDULA_USUARIO
GROUP BY USUARIOT2.CEDULA_USUARIO LIMIT 1) AS OP3
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY VENTA.ID_USUARIO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

ELSE IF(FILTRATE = 1) THEN

SELECT USUARIO.CEDULA_USUARIO, USUARIO.NOMBRE_USUARIO, USUARIO.CORREO_USUARIO, SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2, (SELECT DISTINCT COUNT(ITEM.ID_PRODUCTO)
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO AS USUARIOT2  ON USUARIOT2.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE USUARIOT2.CEDULA_USUARIO = USUARIO.CEDULA_USUARIO
GROUP BY USUARIOT2.CEDULA_USUARIO LIMIT 1) AS OP3
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY VENTA.ID_USUARIO 
ORDER BY SUM(ITEM.CANTIDAD) DESC;

END IF;
END IF; 
END IF;


END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_COMPORTAMIENTOMES`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_COMPORTAMIENTOMES`(IN FECHA_INICIAL DATE,IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2,
(
SELECT  COUNT(E.CODIGO_VENTA)
FROM VENTA AS E
WHERE E.ESTADE_BUY = 0 AND MONTH(E.FECHA_VENTA) = MONTH(VENTA.FECHA_VENTA) LIMIT 1
) AS OP3, 
MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY MONTH(VENTA.FECHA_VENTA) 
ORDER BY MONTH(VENTA.FECHA_VENTA) ASC;

ELSE IF(FILTRATE = 3) THEN

SELECT SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2,
(
SELECT  COUNT(E.CODIGO_VENTA)
FROM VENTA AS E
WHERE E.ESTADE_BUY = 1 AND MONTH(E.FECHA_VENTA) = MONTH(VENTA.FECHA_VENTA) LIMIT 1
) AS OP3, 
MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY MONTH(VENTA.FECHA_VENTA) 
ORDER BY MONTH(VENTA.FECHA_VENTA) ASC;

ELSE IF(FILTRATE = 1) THEN

SELECT SUM(ITEM.CANTIDAD) AS OP1, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP2,
(
SELECT  COUNT(E.CODIGO_VENTA)
FROM VENTA AS E
WHERE MONTH(E.FECHA_VENTA) = MONTH(VENTA.FECHA_VENTA) LIMIT 1
) AS OP3, 
MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE  DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY MONTH(VENTA.FECHA_VENTA) 
ORDER BY MONTH(VENTA.FECHA_VENTA) ASC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_COMPORTAMIENTOPORDUCTOCATEGORIA`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_COMPORTAMIENTOPORDUCTOCATEGORIA`(IN FECHA_INICIAL VARCHAR(500),IN FECHA_FINAL VARCHAR(500),IN CATEGORIAV DOUBLE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, COUNT(VENTA.CODIGO_VENTA) AS OP1, SUM(ITEM.CANTIDAD) AS OP2, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP3, MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN CATEGORIA ON CATEGORIA.CODIGO_CATEGORIA = PRODUCTO.ID_CATEGORIA
WHERE VENTA.ESTADE_BUY = 0 AND (CATEGORIA.CODIGO_CATEGORIA = CATEGORIAV AND VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.ID_PRODUCTO, MONTH(VENTA.FECHA_VENTA) 
ORDER BY SUM(ITEM.ID_PRODUCTO) DESC;

ELSE IF(FILTRATE = 3) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, COUNT(VENTA.CODIGO_VENTA) AS OP1, SUM(ITEM.CANTIDAD) AS OP2, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP3, MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN CATEGORIA ON CATEGORIA.CODIGO_CATEGORIA = PRODUCTO.ID_CATEGORIA
WHERE VENTA.ESTADE_BUY = 1 AND (CATEGORIA.CODIGO_CATEGORIA = CATEGORIAV AND VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.ID_PRODUCTO, MONTH(VENTA.FECHA_VENTA) 
ORDER BY SUM(ITEM.ID_PRODUCTO) DESC;

ELSE IF(FILTRATE = 1) THEN

SELECT PRODUCTO.NOMBRE_PRODUCTO, COUNT(VENTA.CODIGO_VENTA) AS OP1, SUM(ITEM.CANTIDAD) AS OP2, SUM(ITEM.VALOR_TOTAL_ITEM) AS OP3, MONTH(VENTA.FECHA_VENTA) AS OP4
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
INNER JOIN CATEGORIA ON CATEGORIA.CODIGO_CATEGORIA = PRODUCTO.ID_CATEGORIA
WHERE  CATEGORIA.CODIGO_CATEGORIA = CATEGORIAV AND VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY ITEM.ID_PRODUCTO, MONTH(VENTA.FECHA_VENTA) 
ORDER BY SUM(ITEM.ID_PRODUCTO) DESC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;

DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_GENERALDESPACHO`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_GENERALDESPACHO`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY USUARIO.CEDULA_USUARIO DESC;

ELSE IF(FILTRATE = 3) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY USUARIO.CEDULA_USUARIO DESC;

ELSE IF(FILTRATE = 1) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY USUARIO.CEDULA_USUARIO DESC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;


DROP PROCEDURE IF EXISTS `PROCEDURE_REPORTE_GENERALDESPACHO_LOGISTICA`;

DELIMITER $$

CREATE PROCEDURE `PROCEDURE_REPORTE_GENERALDESPACHO_LOGISTICA`(IN FECHA_INICIAL DATE, IN FECHA_FINAL DATE, IN FILTRATE DOUBLE) 
BEGIN

IF(FILTRATE = 2) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 0 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY ITEM.NOMBRE_ITEM ASC;

ELSE IF(FILTRATE = 3) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL)) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE VENTA.ESTADE_BUY = 1 AND (DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY ITEM.NOMBRE_ITEM ASC;

ELSE IF(FILTRATE = 1) THEN

SELECT  ITEM.NOMBRE_ITEM, SUM(ITEM.CANTIDAD) AS "CANTIDAD", ITEM.VALOR_UNITARIO_ITEM, VALOR_TOTAL_ITEM, USUARIO.NOMBRE_USUARIO, 
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1)) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "SINIVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA-(VENTA.VALOR_TOTAL_VENTA/(SELECT (1+(CATEGORIA.IVA/100)) FROM CATEGORIA LIMIT 1))) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "IVA",
(SELECT 
SUM(VENTA.VALOR_TOTAL_VENTA) 
FROM VENTA WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL) AS "TOTAL"
FROM VENTA 
INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA 
INNER JOIN USUARIO ON USUARIO.CEDULA_USUARIO = VENTA.ID_USUARIO
INNER JOIN PRODUCTO ON PRODUCTO.CODIGO_PRODUCTO = ITEM.ID_PRODUCTO 
WHERE DATE(VENTA.FECHA_VENTA) = FECHA_FINAL OR VENTA.FECHA_VENTA BETWEEN FECHA_INICIAL AND FECHA_FINAL 
GROUP BY ITEM.NOMBRE_ITEM, USUARIO.CEDULA_USUARIO
ORDER BY ITEM.NOMBRE_ITEM ASC;

END IF;
END IF; 
END IF;

END $$
DELIMITER ;


---- NUEVOS INGRESOS DE VENTA ---------------
-- PROCEDIMIENTO ACTUALIZAR VENTA  --
DROP PROCEDURE IF EXISTS `PROCEDURE_UPDATE_VENTAHOME`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_UPDATE_VENTAHOME`(IN VALORTOTAL DOUBLE, IN CODIGOVENTA DOUBLE)
BEGIN
DECLARE VER DOUBLE;
DECLARE FECHA DATETIME;

DELETE FROM ITEM WHERE ID_VENTA = CODIGOVENTA;
UPDATE VENTA SET VALOR_TOTAL_VENTA = VALORTOTAL, ESTADE_SEND = 0 WHERE CODIGO_VENTA = CODIGOVENTA;

END $$
DELIMITER ;

-- PROCEDIMIENTO INSERTAR VENTA ITEMS --
DROP PROCEDURE IF EXISTS `PROCEDURE_INSERT_VENTA_ITEMHOME`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INSERT_VENTA_ITEMHOME`(IN NAMEITEM VARCHAR(500), IN COLOR VARCHAR(500), IN CANTIDAD DOUBLE, IN VALORUNI DOUBLE, IN FECHAVENTA VARCHAR(500), IN CODEPRO DOUBLE, IN CODGEINFOR DOUBLE)
BEGIN
DECLARE VER, PROFANTASMA, CODCATEGORIA, VERVENTA DOUBLE;

SET VER = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODEPRO LIMIT 1);
SET VER = (SELECT IFNULL(VER, 1));
SET PROFANTASMA = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE NOMBRE_PRODUCTO = "PRODUCTO FANTASMA" LIMIT 1);
SET PROFANTASMA = (SELECT IFNULL(PROFANTASMA, -1000));
SET CODCATEGORIA = (SELECT CODIGO_CATEGORIA FROM CATEGORIA LIMIT 1);

IF(PROFANTASMA = -1000 AND VER = 1) THEN
INSERT INTO PRODUCTO()
VALUES (1, "PRODUCTO FANTASMA", "NO DISPONIBLE.JPEG", 0, 0, CODCATEGORIA, "");
INSERT INTO PRODUCTO_MULTICOLOR ()
VALUES (1, "NO DISPONIBLE.JPEG", "PRODUCTO FANTASMA", 0, 0);
END IF;

SET VERVENTA = (SELECT CODIGO_VENTA FROM VENTA WHERE CODIGO_VENTA = FECHAVENTA);
SET VERVENTA = (SELECT IFNULL(VERVENTA, -1000));

IF(VERVENTA != -1000) THEN
INSERT INTO ITEM()
VALUES (CODGEINFOR, NAMEITEM, COLOR, CANTIDAD, VALORUNI, CANTIDAD*VALORUNI, VERVENTA, VER);
END IF;

END $$
DELIMITER ;

-- TRIGGER ----

DROP TRIGGER IF EXISTS `INSERT_AFTER_PRODUCTO`;

DELIMITER $$
CREATE TRIGGER `INSERT_AFTER_PRODUCTO`
AFTER INSERT ON `PRODUCTO`
FOR EACH ROW 
BEGIN

UPDATE CATEGORIA SET PRODUCTOS_VINCULADOS = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = NEW.ID_CATEGORIA
    ) WHERE CODIGO_CATEGORIA = NEW.ID_CATEGORIA;

UPDATE CATEGORIA SET PRODUCTOS_ESTADO = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = NEW.ID_CATEGORIA AND PRODUCTO.PRODUCTO_ACTIVADO = 1
    ) WHERE CODIGO_CATEGORIA = NEW.ID_CATEGORIA;

END $$
DELIMITER ;

DROP TRIGGER IF EXISTS `UPDATE_AFTER_PRODUCTO`;

DELIMITER $$
CREATE TRIGGER `UPDATE_AFTER_PRODUCTO`
AFTER UPDATE ON `PRODUCTO`
FOR EACH ROW 
BEGIN

UPDATE CATEGORIA SET PRODUCTOS_VINCULADOS = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = NEW.ID_CATEGORIA
    ) WHERE CODIGO_CATEGORIA = NEW.ID_CATEGORIA;

UPDATE CATEGORIA SET PRODUCTOS_ESTADO = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = NEW.ID_CATEGORIA AND PRODUCTO.PRODUCTO_ACTIVADO = 1
    ) WHERE CODIGO_CATEGORIA = NEW.ID_CATEGORIA;

UPDATE CATEGORIA SET PRODUCTOS_VINCULADOS = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = NEW.ID_CATEGORIA
    ) WHERE CODIGO_CATEGORIA = OLD.ID_CATEGORIA;

UPDATE CATEGORIA SET PRODUCTOS_ESTADO = (
    SELECT COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = OLD.ID_CATEGORIA AND PRODUCTO.PRODUCTO_ACTIVADO = 1
    ) WHERE CODIGO_CATEGORIA = OLD.ID_CATEGORIA;

END $$
DELIMITER ;

ALTER TABLE `COLOR` AUTO_INCREMENT = 1;
ALTER TABLE `CATEGORIA` AUTO_INCREMENT = 1;
ALTER TABLE `PRODUCTO` AUTO_INCREMENT = 1;
ALTER TABLE `USUARIO` AUTO_INCREMENT = 1;
ALTER TABLE `VENTA` AUTO_INCREMENT = 1;
ALTER TABLE `PRODUCTO_COLOR` AUTO_INCREMENT = 1;
ALTER TABLE `REPORTE_FALLOS` AUTO_INCREMENT = 1;