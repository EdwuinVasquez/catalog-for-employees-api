DROP DATABASE IF EXISTS `VENTAEMPLEADOS`;
CREATE DATABASE `VENTAEMPLEADOS`;
USE `VENTAEMPLEADOS`;

-- CREACION DE LA TABLA DE USUARIO ---
CREATE TABLE `USUARIO`(
CEDULA DOUBLE NOT NULL,
NOMBRE VARCHAR(700) NOT NULL,
ROL VARCHAR(300) NOT NULL,
CLAVE VARCHAR(2000) NOT NULL,
PREGUNTA VARCHAR(500) NOT NULL,
RESPUESTA VARCHAR(2000) NOT NULL,
USUARIO_ACTIVADO DOUBLE NOT NULL,
USUARIO_VERIFICADO DOUBLE NOT NULL,
FECHA_REGISTRO DATETIME NOT NULL,
ULTIMO_INGRESO DATETIME NOT NULL,
CONTACTO VARCHAR(1000) NOT NULL,
PRIMARY KEY(CEDULA));

-- CREACION DE LA TABLA DE CATEGORIA ---
CREATE TABLE `CATEGORIA`(
CODIGO_CATEGORIA DOUBLE NOT NULL AUTO_INCREMENT,
NOMBRE_CATEGORIA VARCHAR(700) NOT NULL,
DISPONIBILIDAD DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_CATEGORIA));

-- CREACION DE LA TABLA DE PRODUCTO ---
CREATE TABLE `PRODUCTO`(
CODIGO_PRODUCTO DOUBLE NOT NULL,
NOMBRE_PRODUCTO VARCHAR(700) NOT NULL,
IMAGEN_PRINCIPAL VARCHAR(1000) NOT NULL,
IVA DOUBLE NOT NULL,
DESCUENTO DOUBLE NOT NULL,
PRECIO_BASE DOUBLE NOT NULL,
DETALLES VARCHAR(3000) NOT NULL,
PRODUCTO_DISPONIBLE DOUBLE NOT NULL,
ESTADO_PRODUCTO DOUBLE NOT NULL,
ID_CATEGORIA DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_PRODUCTO),
FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA(CODIGO_CATEGORIA));

-- CREACION DE LA TABLA DE AUXILIAR PRODUCTO INFORMACION---
CREATE TABLE `PRODUCTO_INFORMACION`(
NOMBRE_ESTILO VARCHAR(700) NOT NULL,
TIPO_CONTENIDO DOUBLE NOT NULL,
CONTENIDO VARCHAR(1000) NOT NULL,
IMAGEN_EXTRA VARCHAR(1000) NOT NULL, 
INFORMACION_ADICIONAL VARCHAR(3000) NOT NULL,
DISPONIBLE DOUBLE NOT NULL,
STOCK DOUBLE NOT NULL,
ID_PRODUCTO DOUBLE NOT NULL,
FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(CODIGO_PRODUCTO));

-- CREACION DE LA TABLA VENTA --
CREATE TABLE `VENTA`(
CODIGO_VENTA DOUBLE NOT NULL AUTO_INCREMENT,
FECHA_VENTA DATETIME NOT NULL,
VALOR_IVA DOUBLE NOT NULL,
VALOR_DESCUENTO DOUBLE NOT NULL,
VALOR_TOTAL DOUBLE NOT NULL,
ESTADO_VENTA DOUBLE NOT NULL,
OBSERVACIONES VARCHAR(2000),
CEDULA_USUARIO DOUBLE NOT NULL,
PRIMARY KEY(CODIGO_VENTA),
FOREIGN KEY (CEDULA_USUARIO) REFERENCES USUARIO(CEDULA));

-- CREACION DE LA TABLA ITEM --
CREATE TABLE `ITEM`(
NOMBRE_ITEM VARCHAR(1600) NOT NULL,
INFORMACION_ADICIONAL VARCHAR(3000) NOT NULL,
DESCUENTO DOUBLE NOT NULL,
IVA DOUBLE NOT NULL,
CANTIDAD DOUBLE NOT NULL,
VALOR_BASE DOUBLE NOT NULL,
VALOR_IVA DOUBLE NOT NULL,
VALOR_DESCUENTO DOUBLE NOT NULL,
VALOR_TOTAL DOUBLE NOT NULL,
ID_PRODUCTO DOUBLE NOT NULL,
ID_VENTA DOUBLE NOT NULL,
FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(CODIGO_PRODUCTO),
FOREIGN KEY (ID_VENTA) REFERENCES VENTA(CODIGO_VENTA));

-- CREACION DE LA TABLA APLICACION --
CREATE TABLE `APLICACION`(
CODIGO_APLICACION DOUBLE NOT NULL,
CATALOGO_ACTIVO DOUBLE NOT NULL,
PRIMARY KEY (CODIGO_APLICACION));

-- CREACION TABLA DE HISTORIAL --
CREATE TABLE `HISTORIAL`(
FECHA DATETIME NOT NULL,
INFORMACION VARCHAR(5000) NOT NULL);

ALTER TABLE `CATEGORIA` AUTO_INCREMENT = 1;
ALTER TABLE `VENTA` AUTO_INCREMENT = 1;

-- LISTAR DATOS HOME --
DROP PROCEDURE IF EXISTS `PROCEDURE_LISTAR_DATOSHOME`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LISTAR_DATOSHOME`()
BEGIN
	SELECT
	(SELECT COUNT(VENTA.ESTADO_VENTA) FROM VENTA WHERE VENTA.ESTADO_VENTA = 3) AS "VENTA_PENDIENTE",
	(SELECT COUNT(VENTA.ESTADO_VENTA) FROM VENTA WHERE VENTA.ESTADO_VENTA = 5) AS "VENTA_PAGA",
	(SELECT COUNT(VENTA.ESTADO_VENTA) FROM VENTA WHERE VENTA.ESTADO_VENTA = 2) AS "VENTA_CANCELADA",
	(SELECT COUNT(VENTA.ESTADO_VENTA) FROM VENTA WHERE VENTA.ESTADO_VENTA = 4) AS "VENTA_ENTREGADA",
	(SELECT COUNT(USUARIO.USUARIO_VERIFICADO) FROM USUARIO WHERE USUARIO.USUARIO_VERIFICADO = 0) AS "USURIOS_SIN_VERIFICAR",
	(SELECT COUNT(USUARIO.USUARIO_VERIFICADO) FROM USUARIO WHERE USUARIO.USUARIO_VERIFICADO = 1 AND USUARIO.USUARIO_ACTIVADO = 1) AS "USUARIOS_ACTIVOS",
	(SELECT COUNT(USUARIO.USUARIO_VERIFICADO) FROM USUARIO WHERE USUARIO.USUARIO_VERIFICADO = 1 AND USUARIO.USUARIO_ACTIVADO = 0) AS "USUARIOS_BLOQUEADOS",
	(SELECT COUNT(PRODUCTO.PRODUCTO_DISPONIBLE) FROM PRODUCTO WHERE PRODUCTO.PRODUCTO_DISPONIBLE = 1) AS "PRODUCTO_ACTIVO",
	(SELECT COUNT(PRODUCTO.PRODUCTO_DISPONIBLE) FROM PRODUCTO WHERE PRODUCTO.PRODUCTO_DISPONIBLE = 0) AS "PRODUCTOS_DESACTIVOS",
	(SELECT APLICACION.CATALOGO_ACTIVO FROM APLICACION LIMIT 1) AS "ESTADO_CATALOGO"
	FROM USUARIO LIMIT 1; 
END $$
DELIMITER ;

-- INSERTAR ALERTA --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_APLICACION`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_APLICACION`(IN VAR_ESTADO DOUBLE)
BEGIN
	DELETE FROM APLICACION;
	INSERT INTO APLICACION (CODIGO_APLICACION, CATALOGO_ACTIVO)
	VALUES(1, VAR_ESTADO);
END $$
DELIMITER ;

-- LISTAR CATEGORIAS --
DROP PROCEDURE IF EXISTS `PROCEDURE_LISTAR_CATEGORIAS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LISTAR_CATEGORIAS`()
BEGIN
	SELECT CATEGORIA.CODIGO_CATEGORIA,
	CATEGORIA.NOMBRE_CATEGORIA,
	CATEGORIA.DISPONIBILIDAD,
	(SELECT  COUNT(PRODUCTO.CODIGO_PRODUCTO) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = CATEGORIA.CODIGO_CATEGORIA) AS "NUMERO_PRODUCTOS",
    (SELECT IFNULL(FORMAT(AVG(PRODUCTO.IVA), 1), 0) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = CATEGORIA.CODIGO_CATEGORIA) AS "PROMEDIO_IVA",
   	(SELECT IFNULL(FORMAT(AVG(PRODUCTO.DESCUENTO), 1), 0) FROM PRODUCTO WHERE PRODUCTO.ID_CATEGORIA = CATEGORIA.CODIGO_CATEGORIA) AS "PROMEDIO_DESCUENTO"
	FROM CATEGORIA;
END $$
DELIMITER ;

-- REGISTAR CATEGORIA --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_CATEGORIA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_CATEGORIA`
	(IN VAR_NOMBRE VARCHAR(700))
BEGIN
	DECLARE VERIF DOUBLE;
	SET VERIF = (SELECT COUNT(CODIGO_CATEGORIA) FROM CATEGORIA WHERE NOMBRE_CATEGORIA = UPPER(VAR_NOMBRE));
	INSERT INTO CATEGORIA(CODIGO_CATEGORIA, NOMBRE_CATEGORIA, DISPONIBILIDAD)
	VALUES (NULL, UPPER(VAR_NOMBRE), 1);
	SELECT * FROM CATEGORIA;
END $$
DELIMITER ;

-- MOFDIFICAR ESTADO CATEGORIA --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ESTADOCATEGORIA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ESTADOCATEGORIA`
	(IN VAR_CODIGO DOUBLE, IN VAR_ESTADOCATEGORIA DOUBLE)
BEGIN
	UPDATE CATEGORIA
	SET DISPONIBILIDAD = VAR_ESTADOCATEGORIA
	WHERE CODIGO_CATEGORIA = VAR_CODIGO;

	SELECT * FROM CATEGORIA;
END $$
DELIMITER ;

-- MODIFICAR NOMBRE CATEGORIA --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_NOMBRECATEGORIA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_NOMBRECATEGORIA`
	(IN VAR_CODIGO DOUBLE, IN VAR_NOMBRE VARCHAR(700))
BEGIN
	UPDATE CATEGORIA
	SET NOMBRE_CATEGORIA = UPPER(VAR_NOMBRE)
	WHERE CODIGO_CATEGORIA = VAR_CODIGO;

	SELECT * FROM CATEGORIA;
END $$
DELIMITER ;

-- ELIMINAR NOMBRE CATEGORIA --
DROP PROCEDURE IF EXISTS `PROCEDURE_ELIMINAR_CATEGORIA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_ELIMINAR_CATEGORIA`
	(IN VAR_CODIGO DOUBLE)
BEGIN
	DECLARE DEC_VACIO, DEC_NUMEROPRODUCTOS DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CODIGO, 0));
	SET DEC_NUMEROPRODUCTOS = (SELECT COUNT(ID_CATEGORIA) FROM PRODUCTO WHERE ID_CATEGORIA = DEC_VACIO);
	
	IF(DEC_NUMEROPRODUCTOS = 0 AND DEC_VACIO != 0) THEN
		DELETE FROM CATEGORIA WHERE CODIGO_CATEGORIA = VAR_CODIGO;
		SELECT "CATEGORIA ELIMINADA" AS "RESULTADO";
	ELSE 
		SELECT "ERROR LA CATEGORIA NO SE PUEDE BORRAR YA QUE PODRIA AFECTAR GRAVEMENTE LOS DATOS ALMACENADO"  AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MODIFICAR IVA --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_CATEGORIAIVA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_CATEGORIAIVA`
	(IN VAR_CODIGO DOUBLE, IN VAR_IVA DOUBLE)
BEGIN
	UPDATE PRODUCTO
	SET IVA = VAR_IVA
	WHERE ID_CATEGORIA = VAR_CODIGO;
END $$
DELIMITER ;

-- MODIFICAR DESCUENTO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_CATEGORIADESCUENTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_CATEGORIADESCUENTO`
	(IN VAR_CODIGO DOUBLE, IN VAR_DESCUENTO DOUBLE)
BEGIN
	UPDATE PRODUCTO
	SET DESCUENTO = VAR_DESCUENTO
	WHERE ID_CATEGORIA = VAR_CODIGO;
END $$
DELIMITER ;

-- MODIFICAR VALOR NUMERO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_CATEGORIAVALORNUMERO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_CATEGORIAVALORNUMERO`
	(IN VAR_CODIGO DOUBLE, IN VAR_NUMERO DOUBLE)
BEGIN
	UPDATE PRODUCTO
	SET PRECIO_BASE = (PRECIO_BASE + VAR_NUMERO)
	WHERE ID_CATEGORIA = VAR_CODIGO;
END $$
DELIMITER ;

-- MODIFICAR VALOR PORCENTAJE --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_CATEGORIAVALORPORCENTAJE`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_CATEGORIAVALORPORCENTAJE`
	(IN VAR_CODIGO DOUBLE, IN VAR_NUMERO DOUBLE)
BEGIN
	UPDATE PRODUCTO
	SET PRECIO_BASE = (PRECIO_BASE + ((PRECIO_BASE/100)*VAR_NUMERO))
	WHERE ID_CATEGORIA = VAR_CODIGO;
END $$
DELIMITER ;

-- LISTAR PRODUCTOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_LISTAR_PRODUCTOS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LISTAR_PRODUCTOS`()
BEGIN
	SELECT 
	*,
	(IFNULL((SELECT COUNT(ITEM.ID_PRODUCTO) FROM ITEM WHERE ITEM.ID_PRODUCTO = PRODUCTO.CODIGO_PRODUCTO), 0)) AS "NUMERO_VENTAS",
	(SELECT CATEGORIA.DISPONIBILIDAD FROM CATEGORIA WHERE CATEGORIA.CODIGO_CATEGORIA = PRODUCTO.ID_CATEGORIA) AS "CATEGORIA_DISPONIBLE"
	FROM PRODUCTO
	INNER JOIN PRODUCTO_INFORMACION ON PRODUCTO.CODIGO_PRODUCTO = PRODUCTO_INFORMACION.ID_PRODUCTO
	INNER JOIN CATEGORIA ON PRODUCTO.ID_CATEGORIA = CATEGORIA.CODIGO_CATEGORIA
	ORDER BY PRODUCTO.ID_CATEGORIA ASC;
END $$
DELIMITER ;

-- REGISTAR PRODUCTO --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_PRODUCTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_PRODUCTO`
	(IN VAR_CODIGO_PRODUCTO DOUBLE,IN VAR_NOMBRE_PRODUCTO VARCHAR(700),IN VAR_IMAGEN_PRINCIPAL VARCHAR(1000),IN VAR_IVA DOUBLE,IN VAR_DESCUENTO DOUBLE,IN VAR_PRECIO_BASE DOUBLE,IN VAR_DETALLES VARCHAR(3000),IN VAR_PRODUCTO_DISPONIBLE DOUBLE,IN VAR_ESTADO_PRODUCTO DOUBLE,IN VAR_ID_CATEGORIA DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO);
	SET DEC_VACIO = (SELECT IFNULL(DEC_VACIO, 0));
	IF(DEC_VACIO = 0 ) THEN
		DELETE FROM PRODUCTO_INFORMACION WHERE ID_PRODUCTO = VAR_CODIGO_PRODUCTO;
	  INSERT INTO PRODUCTO (CODIGO_PRODUCTO, NOMBRE_PRODUCTO, IMAGEN_PRINCIPAL, IVA, DESCUENTO, PRECIO_BASE, DETALLES, PRODUCTO_DISPONIBLE, ESTADO_PRODUCTO, ID_CATEGORIA) 
	  VALUES (VAR_CODIGO_PRODUCTO, UPPER(VAR_NOMBRE_PRODUCTO), VAR_IMAGEN_PRINCIPAL, VAR_IVA, VAR_DESCUENTO, VAR_PRECIO_BASE, UPPER(VAR_DETALLES), VAR_PRODUCTO_DISPONIBLE, VAR_ESTADO_PRODUCTO, VAR_ID_CATEGORIA);
	ELSE
		DELETE FROM PRODUCTO_INFORMACION WHERE ID_PRODUCTO = VAR_CODIGO_PRODUCTO;
		UPDATE PRODUCTO
		SET 
			NOMBRE_PRODUCTO = UPPER(VAR_NOMBRE_PRODUCTO), 
			IMAGEN_PRINCIPAL = VAR_IMAGEN_PRINCIPAL, 
			IVA = VAR_IVA, 
			DESCUENTO = VAR_DESCUENTO, 
			PRECIO_BASE = VAR_PRECIO_BASE, 
			DETALLES = UPPER(VAR_DETALLES), 
			PRODUCTO_DISPONIBLE = VAR_PRODUCTO_DISPONIBLE, 
			ESTADO_PRODUCTO = VAR_ESTADO_PRODUCTO, 
			ID_CATEGORIA = ID_CATEGORIA
		WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO;
	END IF;
	 	SELECT CODIGO_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO;
END $$
DELIMITER ;

-- REGISTAR PRODUCTO INFORMACION ADICIONAL --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_PRODUCTOINFO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_PRODUCTOINFO`
	(IN VAR_CODIGO_PRODUCTO DOUBLE,IN VAR_NOMBRE_ESTILO VARCHAR(700),IN VAR_TIPO_CONTENIDO DOUBLE, IN VAR_CONTENIDO VARCHAR(1000),IN VAR_IMAGEN_EXTRA VARCHAR(1000),IN VAR_DISPONIBLE DOUBLE)
BEGIN
	INSERT INTO PRODUCTO_INFORMACION (NOMBRE_ESTILO, TIPO_CONTENIDO, CONTENIDO, IMAGEN_EXTRA, INFORMACION_ADICIONAL, DISPONIBLE, STOCK, ID_PRODUCTO) 
	VALUES (UPPER(VAR_NOMBRE_ESTILO), VAR_TIPO_CONTENIDO, VAR_CONTENIDO, VAR_IMAGEN_EXTRA, "", 1, 0, VAR_CODIGO_PRODUCTO);
END $$
DELIMITER ;

-- ELIMINAR PRODUCTO --
DROP PROCEDURE IF EXISTS `PROCEDURE_ELIMINAR_PRODUCTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_ELIMINAR_PRODUCTO`(IN VAR_CODIGO_PRODUCTO DOUBLE)
BEGIN
	DECLARE DEC_VACIO, DEC_NUMEROCOMPRAS DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CODIGO_PRODUCTO, 0));
	SET DEC_NUMEROCOMPRAS = (SELECT COUNT(ID_PRODUCTO) FROM ITEM WHERE ID_PRODUCTO = VAR_CODIGO_PRODUCTO);

	IF((DEC_NUMEROCOMPRAS = 0 AND DEC_VACIO != 0)) THEN
		DELETE FROM PRODUCTO_INFORMACION WHERE ID_PRODUCTO = VAR_CODIGO_PRODUCTO;
		DELETE FROM PRODUCTO WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO;
		SELECT "PRODUCTO ELIMINADO" AS "RESULTADO";
	ELSE 
		SELECT "ERROR EL PRODUCTO NO SE PUEDE BORRAR YA QUE PODRIA AFECTAR GRAVEMENTE LOS DATOS ALMACENADO"  AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- SIN STOCK O CON STOCK PRODUCTOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ESTADOPRODUCTO_PRODUCTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ESTADOPRODUCTO_PRODUCTO`(IN VAR_CODIGO_PRODUCTO DOUBLE, IN VAR_ESTADO DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CODIGO_PRODUCTO, 0));
	IF(DEC_VACIO != 0 AND (VAR_ESTADO = 6 OR VAR_ESTADO = 7)) THEN
		UPDATE PRODUCTO
		SET ESTADO_PRODUCTO = VAR_ESTADO
		WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO;
		SELECT CONCAT("PRODUCTO ", VAR_CODIGO_PRODUCTO, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("PRODUCTO ", VAR_CODIGO_PRODUCTO, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- ACTIVO O DESACTIVO PRODUCTOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_DISPONIBILIDADPRODUCTO_PRODUCTO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_DISPONIBILIDADPRODUCTO_PRODUCTO`(IN VAR_CODIGO_PRODUCTO DOUBLE, IN VAR_ESTADO DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CODIGO_PRODUCTO, 0));
	IF(DEC_VACIO != 0 AND (VAR_ESTADO = 0 OR VAR_ESTADO = 1)) THEN
		UPDATE PRODUCTO
		SET ESTADO_PRODUCTO = VAR_ESTADO
		WHERE CODIGO_PRODUCTO = VAR_CODIGO_PRODUCTO;
		SELECT CONCAT("PRODUCTO ", VAR_CODIGO_PRODUCTO, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("PRODUCTO ", VAR_CODIGO_PRODUCTO, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- BUSCAR O LISTAR USUARIOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_LISTAR_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LISTAR_USUARIO`(IN VAR_CEDULA DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		SELECT * ,
		(SELECT COUNT(VENTA.CODIGO_VENTA) 
			FROM VENTA 
			WHERE VENTA.CEDULA_USUARIO = USUARIO.CEDULA) AS 'NUMERO_COMPRAS'
		FROM USUARIO
		WHERE CEDULA = VAR_CEDULA;
	ELSE 
		SELECT * , 
		(SELECT COUNT(VENTA.CODIGO_VENTA) 
			FROM VENTA 
			WHERE VENTA.CEDULA_USUARIO = USUARIO.CEDULA) AS 'NUMERO_COMPRAS'
		FROM USUARIO;
	END IF;
END $$
DELIMITER ;

-- REGISTAR USUARIOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_USUARIO`
	(IN VAR_CEDULA DOUBLE,IN VAR_NOMBRE VARCHAR(700),IN VAR_ROL VARCHAR(300),IN VAR_CLAVE VARCHAR(2000),IN VAR_PREGUNTA VARCHAR(500),IN VAR_RESPUESTA VARCHAR(2000),IN VAR_USUARIO_ACTIVADO DOUBLE,IN VAR_USUARIO_VERIFICADO DOUBLE,IN VAR_CONTACTO VARCHAR(1000))
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT CEDULA FROM USUARIO WHERE CEDULA = VAR_CEDULA);
	SET DEC_VACIO = (SELECT IFNULL(DEC_VACIO, 0));
	IF(DEC_VACIO = 0 ) THEN
	  INSERT INTO USUARIO (CEDULA, NOMBRE, ROL, CLAVE, PREGUNTA, RESPUESTA, USUARIO_ACTIVADO, USUARIO_VERIFICADO, FECHA_REGISTRO, ULTIMO_INGRESO, CONTACTO) 
	  VALUES (VAR_CEDULA, VAR_NOMBRE, VAR_ROL, VAR_CLAVE, VAR_PREGUNTA, VAR_RESPUESTA, VAR_USUARIO_ACTIVADO, VAR_USUARIO_VERIFICADO, NOW(), NOW(), VAR_CONTACTO);
	 	SELECT "El USUARIO FUE REGISTRADO CORRECTAMENTE" AS "RESULTADO";
	ELSE
	  SELECT "ERROR EL USUARIO YA ESTA REGISTRADO" AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- ELIMINAR USUARIOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_ELIMINAR_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_ELIMINAR_USUARIO`(IN VAR_CEDULA DOUBLE)
BEGIN
	DECLARE DEC_ROL VARCHAR(300);
	DECLARE DEC_VACIO, DEC_NUMEROCOMPRAS DOUBLE;
	SET DEC_ROL = (SELECT UPPER(ROL) FROM USUARIO WHERE CEDULA = VAR_CEDULA);
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));

	IF(DEC_ROL = "EMPLEADO") THEN
		SET DEC_NUMEROCOMPRAS = (SELECT COUNT(CODIGO_VENTA) FROM VENTA WHERE CEDULA_USUARIO = VAR_CEDULA);
	END IF;

	IF((DEC_NUMEROCOMPRAS = 0 AND DEC_VACIO != 0) AND DEC_ROL != "ADMINSUPER") THEN
		DELETE FROM USUARIO WHERE CEDULA = VAR_CEDULA;
		SELECT "USUARIO ELIMINADO" AS "RESULTADO";
	ELSE 
		SELECT "ERROR EL USUARIO NO SE PUEDE BORRAR YA QUE PODRIA AFECTAR GRAVEMENTE LOS DATOS ALMACENADO"  AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- BLOQUEAR O DESBLOQUEAR USUARIOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ESTADOUSUARIO_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ESTADOUSUARIO_USUARIO`(IN VAR_CEDULA DOUBLE, IN VAR_ESTADO DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0 AND (VAR_ESTADO = 1 OR VAR_ESTADO = 0)) THEN
		UPDATE USUARIO
		SET USUARIO_ACTIVADO = VAR_ESTADO
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- VERIFICAR USUARIO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ESTADOVERIFICADO_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ESTADOVERIFICADO_USUARIO`(IN VAR_CEDULA DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET USUARIO_ACTIVADO = 1, USUARIO_VERIFICADO = 1
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " VERIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO VERIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MOFDIFICAR USUARIO PREGUNTA--
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICARPREGUNTA_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICARPREGUNTA_USUARIO`
	(IN VAR_CEDULA DOUBLE, IN VAR_PREGUNTA VARCHAR(500),IN VAR_RESPUESTA VARCHAR(2000))
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET PREGUNTA = VAR_PREGUNTA, 
			RESPUESTA = VAR_RESPUESTA
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MOFDIFICAR USUARIO CONTACTO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICARCONCTACTO_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICARCONCTACTO_USUARIO`
	(IN VAR_CEDULA DOUBLE,IN VAR_CONTACTO VARCHAR(1000))
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET CONTACTO = VAR_CONTACTO
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MODIFICAR USUARIO NOMBRE --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICARNOMBRE_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICARNOMBRE_USUARIO`
	(IN VAR_CEDULA DOUBLE,IN VAR_NOMBRE VARCHAR(1000))
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET NOMBRE = VAR_NOMBRE
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MODIFICAR CLAVE USUARIO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_CLAVE_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_CLAVE_USUARIO`(IN VAR_CEDULA DOUBLE,IN VAR_CLAVE VARCHAR(2000))
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET CLAVE = VAR_CLAVE
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " MODIFICADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL USUARIO ", VAR_CEDULA, " NO SE PUDO MODIFICAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- MODIFICAR CLAVE USUARIO --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ULTIMOINGRESO_USUARIO`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ULTIMOINGRESO_USUARIO`(IN VAR_CEDULA DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_CEDULA, 0));
	IF(DEC_VACIO != 0) THEN
		UPDATE USUARIO
		SET ULTIMO_INGRESO = NOW()
		WHERE CEDULA = VAR_CEDULA;
		SELECT CONCAT("USUARIO ", VAR_CEDULA, " LOGUEADO") AS "RESULTADO";
	ELSE
		SELECT CONCAT("ERROR EL  USUARIO ", VAR_CEDULA, " NO SE PUDO LOGUEAR") AS "RESULTADO";
	END IF;
END $$
DELIMITER ;

-- REGISTAR ITEM --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_ITEMVENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_ITEMVENTA`
	(IN VAR_NOMBREITEM VARCHAR(1600), IN VAR_INFORMACIONADICIONAL VARCHAR(3000), IN VAR_DESCUENTO DOUBLE, IN VAR_IVA DOUBLE, IN VAR_CANTIDAD DOUBLE, IN VAR_VALORBASE DOUBLE, IN VAR_VALORIVA DOUBLE, IN VAR_VALORDESCUENTO DOUBLE, IN VAR_VALORTOTAL DOUBLE, IN VAR_IDPRODUCTO DOUBLE, IN VAR_IDVENTA DOUBLE)
BEGIN
	DECLARE VERIFICADOR DOUBLE;
	SET VERIFICADOR = (SELECT COUNT(ITEM.NOMBRE_ITEM) FROM ITEM WHERE ITEM.NOMBRE_ITEM = UPPER(VAR_NOMBREITEM) AND ITEM.ID_VENTA = VAR_IDVENTA); 
	SET VERIFICADOR = (SELECT IFNULL(VERIFICADOR, 0));

	IF(VERIFICADOR != 0) THEN
		INSERT INTO ITEM (NOMBRE_ITEM, INFORMACION_ADICIONAL, DESCUENTO, IVA, CANTIDAD, VALOR_BASE, VALOR_IVA, VALOR_DESCUENTO, VALOR_TOTAL, ID_PRODUCTO, ID_VENTA) 
		VALUES (UPPER(VAR_NOMBREITEM), UPPER(VAR_INFORMACIONADICIONAL), VAR_DESCUENTO, VAR_IVA , VAR_CANTIDAD, VAR_VALORBASE, VAR_VALORIVA, VAR_VALORDESCUENTO, VAR_VALORTOTAL, VAR_IDPRODUCTO, VAR_IDVENTA);
	ELSE 
		DELETE FROM ITEM WHERE ITEM.NOMBRE_ITEM = UPPER(VAR_NOMBREITEM) AND ITEM.ID_VENTA = VAR_IDVENTA;
		INSERT INTO ITEM (NOMBRE_ITEM, INFORMACION_ADICIONAL, DESCUENTO, IVA, CANTIDAD, VALOR_BASE, VALOR_IVA, VALOR_DESCUENTO, VALOR_TOTAL, ID_PRODUCTO, ID_VENTA) 
		VALUES (UPPER(VAR_NOMBREITEM), UPPER(VAR_INFORMACIONADICIONAL), VAR_DESCUENTO, VAR_IVA , VAR_CANTIDAD, VAR_VALORBASE, VAR_VALORIVA, VAR_VALORDESCUENTO, VAR_VALORTOTAL, VAR_IDPRODUCTO, VAR_IDVENTA);
	END IF;
END $$
DELIMITER ;

-- BUSCAR O LISTAR USUARIOS --
DROP PROCEDURE IF EXISTS `PROCEDURE_LISTAR_VENTAS`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_LISTAR_VENTAS`(IN VAR_VENTA DOUBLE)
BEGIN
	DECLARE DEC_VACIO DOUBLE;
	SET DEC_VACIO = (SELECT IFNULL(VAR_VENTA, 0));
	IF(DEC_VACIO != 0) THEN
		SELECT 
			ITEM.NOMBRE_ITEM AS "ITEM_NOMBRE_ITEM",
			ITEM.INFORMACION_ADICIONAL AS "ITEM_INFORMACION_ADICIONAL",
			ITEM.DESCUENTO AS "ITEM_DESCUENTO",
			ITEM.IVA AS "ITEM_IVA",
			ITEM.CANTIDAD AS "ITEM_CANTIDAD",
			ITEM.VALOR_BASE AS "ITEM_VALOR_BASE",
			ITEM.VALOR_IVA AS "ITEM_VALOR_IVA",
			ITEM.VALOR_DESCUENTO AS "ITEM_VALOR_DESCUENTO",
			ITEM.VALOR_TOTAL AS "ITEM_VALOR_TOTAL",
			ITEM.ID_PRODUCTO AS "ITEM_ID_PRODUCTO",
			VENTA.CODIGO_VENTA AS "VENTA_CODIGO_VENTA",
			VENTA.FECHA_VENTA AS "VENTA_FECHA_VENTA",
			VENTA.VALOR_IVA AS "VENTA_VALOR_IVA",
			VENTA.VALOR_DESCUENTO AS "VENTA_VALOR_DECUENTO",
			VENTA.VALOR_TOTAL AS "VENTA_VALOR_TOTAL",
			VENTA.ESTADO_VENTA AS "VENTA_ESTADO_VENTA",
			VENTA.OBSERVACIONES AS "VENTA_OBSERVACIONES",
			VENTA.CEDULA_USUARIO AS "VENTA_CEDULA_USUARIO",
			USUARIO.NOMBRE AS "USUARIO_NOMBRE",
			USUARIO.CONTACTO AS "USUARIO_CONCTACTO"
		FROM VENTA
		INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA
		INNER JOIN USUARIO ON VENTA.CEDULA_USUARIO = USUARIO.CEDULA
		WHERE VENTA.CODIGO_VENTA = VAR_VENTA
		ORDER BY VENTA.FECHA_VENTA DESC;
	ELSE 
		SELECT 
			ITEM.NOMBRE_ITEM AS "ITEM_NOMBRE_ITEM",
			ITEM.INFORMACION_ADICIONAL AS "ITEM_INFORMACION_ADICIONAL",
			ITEM.DESCUENTO AS "ITEM_DESCUENTO",
			ITEM.IVA AS "ITEM_IVA",
			ITEM.CANTIDAD AS "ITEM_CANTIDAD",
			ITEM.VALOR_BASE AS "ITEM_VALOR_BASE",
			ITEM.VALOR_IVA AS "ITEM_VALOR_IVA",
			ITEM.VALOR_DESCUENTO AS "ITEM_VALOR_DESCUENTO",
			ITEM.VALOR_TOTAL AS "ITEM_VALOR_TOTAL",
			ITEM.ID_PRODUCTO AS "ITEM_ID_PRODUCTO",
			VENTA.CODIGO_VENTA AS "VENTA_CODIGO_VENTA",
			VENTA.FECHA_VENTA AS "VENTA_FECHA_VENTA",
			VENTA.VALOR_IVA AS "VENTA_VALOR_IVA",
			VENTA.VALOR_DESCUENTO AS "VENTA_VALOR_DECUENTO",
			VENTA.VALOR_TOTAL AS "VENTA_VALOR_TOTAL",
			VENTA.ESTADO_VENTA AS "VENTA_ESTADO_VENTA",
			VENTA.OBSERVACIONES AS "VENTA_OBSERVACIONES",
			VENTA.CEDULA_USUARIO AS "VENTA_CEDULA_USUARIO",
			USUARIO.NOMBRE AS "USUARIO_NOMBRE",
			USUARIO.CONTACTO AS "USUARIO_CONCTACTO"
		FROM VENTA
		INNER JOIN ITEM ON VENTA.CODIGO_VENTA = ITEM.ID_VENTA
		INNER JOIN USUARIO ON VENTA.CEDULA_USUARIO = USUARIO.CEDULA
		ORDER BY VENTA.FECHA_VENTA DESC;
	END IF;
END $$
DELIMITER ;

-- REGISTAR VENTA --
DROP PROCEDURE IF EXISTS `PROCEDURE_INGRESAR_VENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_INGRESAR_VENTA`
	(IN VAR_VALORIVA DOUBLE, IN VAR_VALORDESCUENTO DOUBLE, IN VAR_VALORTOTAL DOUBLE, IN VAR_ESTADOVENTA DOUBLE, IN VAR_OBSERVACIONES VARCHAR(2000), IN VAR_CEDULA DOUBLE)
BEGIN
	DECLARE DEC_FECHA DATETIME;
	SET DEC_FECHA = NOW();
	
	INSERT INTO VENTA(CODIGO_VENTA, FECHA_VENTA, VALOR_IVA, VALOR_DESCUENTO, VALOR_TOTAL, ESTADO_VENTA, OBSERVACIONES, CEDULA_USUARIO)
	VALUES (NULL, DEC_FECHA, VAR_VALORIVA, VAR_VALORDESCUENTO, VAR_VALORTOTAL, VAR_ESTADOVENTA, VAR_OBSERVACIONES, VAR_CEDULA);

	SELECT * FROM VENTA WHERE FECHA_VENTA = DEC_FECHA AND (VALOR_TOTAL = VAR_VALORTOTAL AND CEDULA_USUARIO = VAR_CEDULA);
END $$
DELIMITER ;

-- MOFDIFICAR ESTADO COMPRA --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_ESTADOVENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_ESTADOVENTA`
	(IN VAR_CODIGO DOUBLE, IN VAR_ESTADOVENTA DOUBLE, IN VAR_CEDULA DOUBLE)
BEGIN
	UPDATE VENTA
	SET ESTADO_VENTA = VAR_ESTADOVENTA
	WHERE CODIGO_VENTA = VAR_CODIGO AND CEDULA_USUARIO = VAR_CEDULA;

	SELECT * FROM VENTA WHERE CODIGO_VENTA = VAR_CODIGO AND CEDULA_USUARIO = VAR_CEDULA;
END $$
DELIMITER ;

-- MODIFICAR COMPRA --
DROP PROCEDURE IF EXISTS `PROCEDURE_MODIFICAR_VENTA`;

DELIMITER $$
CREATE PROCEDURE `PROCEDURE_MODIFICAR_VENTA`
	(IN VAR_CODIGO DOUBLE, IN VAR_VALORIVA DOUBLE, IN VAR_VALORDESCUENTO DOUBLE, IN VAR_VALORTOTAL DOUBLE, IN VAR_ESTADOVENTA DOUBLE, IN VAR_CEDULA DOUBLE)
BEGIN
	UPDATE VENTA
	SET VALOR_IVA = VAR_VALORIVA, 
	VALOR_DESCUENTO = VAR_VALORDESCUENTO,
	VALOR_TOTAL = VAR_VALORTOTAL,
	ESTADO_VENTA = VAR_ESTADOVENTA
	WHERE CODIGO_VENTA = VAR_CODIGO AND CEDULA_USUARIO = VAR_CEDULA;

	DELETE FROM ITEM WHERE ID_VENTA = VAR_CODIGO;
	SELECT * FROM VENTA WHERE CODIGO_VENTA = VAR_CODIGO AND CEDULA_USUARIO = VAR_CEDULA;
END $$
DELIMITER ;

INSERT INTO `usuario` (`CEDULA`, `NOMBRE`, `ROL`, `CLAVE`, `PREGUNTA`, `RESPUESTA`, `USUARIO_ACTIVADO`, `USUARIO_VERIFICADO`, `FECHA_REGISTRO`, `ULTIMO_INGRESO`, `CONTACTO`) VALUES
(12345, 'ADMON', 'ADMINISTRADOR', '$2a$10$7Zo110LItIFqgz73OA0bdu9oEkpC/bNg0AAoAOGn7Dn9xzRB5US12', 'color favorito', '$2a$10$WiLEmrNPNPNYW20KlEYcGOgDzdsmrvVkqnb4LAp0cpS4F1m2BDSEC', 1, 1, now(), now(), '');
COMMIT;